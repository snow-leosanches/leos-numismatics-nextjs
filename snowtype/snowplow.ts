import { trackSelfDescribingEvent, CommonEventProperties, SelfDescribingJson } from '@snowplow/browser-tracker';
// Automatically generated by Snowtype

/**
 * Event defining the Add to Cart action
 */
export type AddToCart = {
    /**
     * name of item/product abandoned
     */
    name: string;
    /**
     * The price of the product at the time it was added to the cart
     */
    price?: number;
    /**
     * The unique identifier of the product added to the cart
     */
    productId: string;
    /**
     * The quantity of the product added to the cart
     */
    quantity?: number;
}

/**
 * The checkout confirmation event.
 */
export type CheckoutCompleted = {
    /**
     * The Billing City.
     */
    billing_city?: null | string;
    /**
     * The Billing Country.
     */
    billing_country?: null | string;
    /**
     * The Billing State.
     */
    billing_state?: null | string;
    /**
     * The coupon code used, if any.
     */
    coupon_code?: null | string;
    /**
     * The Shipping City.
     */
    shipping_city?: null | string;
    /**
     * The Shipping Country.
     */
    shipping_country?: null | string;
    /**
     * The Shipping State.
     */
    shipping_state?: null | string;
    /**
     * The checkout total.
     */
    total: number;
}

/**
 * Product entity from Enhanced Ecommerce
 */
export type EcommerceProduct = {
    /**
     * Currency (ISO 4217) of the product price
     */
    currency?: string;
    /**
     * Discount applied to the product
     */
    discount?: number;
    /**
     * Position of the product in the list
     */
    index?: number;
    /**
     * All sizes available
     */
    item_all_sizes?: string;
    /**
     * Availability status of the item
     */
    item_availability?: string;
    /**
     * Currently available sizes
     */
    item_available_sizes?: string;
    /**
     * Proportion of available sizes (0â€“1)
     */
    item_available_sizes_share?: number;
    /**
     * Brand of the product
     */
    item_brand?: string;
    /**
     * Category ID of the product
     */
    item_category?: string;
    /**
     * The product ID
     */
    item_id?: string;
    /**
     * Comma-separated IDs of viewed images
     */
    item_image_view_ids?: string;
    /**
     * Number of images for the product
     */
    item_images_count?: number;
    /**
     * The list the item appeared in
     */
    item_list_name?: string;
    /**
     * Name of the product
     */
    item_name?: string;
    /**
     * Price type (e.g., regular, sale)
     */
    item_price_type?: string;
    /**
     * Size reserves
     */
    item_reserve?: string;
    /**
     * Variant ID of the product
     */
    item_variant?: string;
    /**
     * Price of the product
     */
    price?: number;
    /**
     * Quantity of the product
     */
    quantity?: number;
    [property: string]: any;
}

/**
 * Checkout Started event, with cart data.
 */
export type CheckoutStarted = {
    /**
     * The Cart ID.
     */
    cart_id: string;
}

/**
 * product entity
 */
export type EcommerceProduct1 = {
    /**
     * The brand of the product.
     */
    brand?: null | string;
    /**
     * The category the product belongs to. Use a consistent separator to express multiple
     * levels. E.g. Woman/Shoes/Sneakers
     */
    category: string;
    /**
     * Identifier/Name/Url for the creative presented on a list or product view.
     */
    creative_id?: null | string;
    /**
     * The currency in which the product is being priced (ISO 4217).
     */
    currency: string;
    /**
     * The SKU or product ID.
     */
    id: string;
    /**
     * The inventory status of the product E.g. in stock, out of stock, preorder, backorder.
     */
    inventory_status?: null | string;
    /**
     * The list or recommended retail price of a product.
     */
    list_price?: number | null;
    /**
     * The name or title of the product.
     */
    name?: null | string;
    /**
     * The position the product was presented in a list of products E.g. search results, product
     * list page.
     */
    position?: number | null;
    /**
     * The price of the product at the current time.
     */
    price: number;
    /**
     * The quantity of the product taking part in the ecommerce action.
     */
    quantity?: number | null;
    /**
     * The size of the product.
     */
    size?: null | string;
    /**
     * The variant of the product.
     */
    variant?: null | string;
    [property: string]: any;
}

/**
 * Properties of a product removed from cart.
 */
export type RemoveFromCart = {
    /**
     * The product name.
     */
    name: string;
    /**
     * The price when the product was removed.
     */
    price?: number | null;
    /**
     * The product ID.
     */
    productId: string;
    /**
     * The quantity removed.
     */
    quantity?: number | null;
}

/**
 * Creates a Snowplow Event Specification entity.
 */
export function createEventSpecification(eventSpecification: EventSpecification){
    return {
        schema:
            'iglu:com.snowplowanalytics.snowplow/event_specification/jsonschema/1-0-3',
        data: eventSpecification,
    }
}

/**
 * Automatically attached context for event specifications
 */
interface EventSpecification {
    id: string;
    name: string;
    data_product_id: string;
    data_product_name: string;
    data_product_domain: string;
}

type ContextsOrTimestamp<T = any> = Omit<CommonEventProperties<T>, 'context'> & { context?: SelfDescribingJson<T>[] | null | undefined }
/**
 * Track a Snowplow event for AddToCart.
 * Event defining the Add to Cart action
 */
export function trackAddToCart<T extends {} = any>(addToCart: AddToCart & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = addToCart;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.snowplowanalytics.console/add_to_cart/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow AddToCart entity.
 */
export function createAddToCart(addToCart: AddToCart){
    return {
        schema: 'iglu:com.snowplowanalytics.console/add_to_cart/jsonschema/1-0-0',
        data: addToCart
    }
}
/**
 * Track a Snowplow event for CheckoutCompleted.
 * The checkout confirmation event.
 */
export function trackCheckoutCompleted<T extends {} = any>(checkoutCompleted: CheckoutCompleted & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = checkoutCompleted;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.leosnumismatics/checkout_completed/jsonschema/1-1-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow CheckoutCompleted entity.
 */
export function createCheckoutCompleted(checkoutCompleted: CheckoutCompleted){
    return {
        schema: 'iglu:com.leosnumismatics/checkout_completed/jsonschema/1-1-0',
        data: checkoutCompleted
    }
}
/**
 * Track a Snowplow event for EcommerceProduct.
 * Product entity from Enhanced Ecommerce
 */
export function trackEcommerceProduct<T extends {} = any>(ecommerceProduct: EcommerceProduct & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = ecommerceProduct;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.snplow.sales.aws/ecommerce_product/jsonschema/2-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow EcommerceProduct entity.
 */
export function createEcommerceProduct(ecommerceProduct: EcommerceProduct){
    return {
        schema: 'iglu:com.snplow.sales.aws/ecommerce_product/jsonschema/2-0-0',
        data: ecommerceProduct
    }
}
/**
 * Track a Snowplow event for CheckoutStarted.
 * Checkout Started event, with cart data.
 */
export function trackCheckoutStarted<T extends {} = any>(checkoutStarted: CheckoutStarted & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = checkoutStarted;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.leosnumismatics/checkout_started/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow CheckoutStarted entity.
 */
export function createCheckoutStarted(checkoutStarted: CheckoutStarted){
    return {
        schema: 'iglu:com.leosnumismatics/checkout_started/jsonschema/1-0-0',
        data: checkoutStarted
    }
}
/**
 * Track a Snowplow event for EcommerceProduct1.
 * product entity
 */
export function trackEcommerceProduct1<T extends {} = any>(ecommerceProduct1: EcommerceProduct1 & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = ecommerceProduct1;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.snplow.sales.aws/ecommerce_product/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow EcommerceProduct1 entity.
 */
export function createEcommerceProduct1(ecommerceProduct1: EcommerceProduct1){
    return {
        schema: 'iglu:com.snplow.sales.aws/ecommerce_product/jsonschema/1-0-0',
        data: ecommerceProduct1
    }
}
/**
 * Track a Snowplow event for RemoveFromCart.
 * Properties of a product removed from cart.
 */
export function trackRemoveFromCart<T extends {} = any>(removeFromCart: RemoveFromCart & ContextsOrTimestamp<T>, trackers?: string[]){
    const { context, timestamp, ...data } = removeFromCart;
    const event: SelfDescribingJson = {
        schema: 'iglu:com.leosnumismatics/remove_from_cart/jsonschema/1-0-0',
        data
    };

    trackSelfDescribingEvent({
        event,
        context,
        timestamp,
    }, trackers);
}

/**
 * Creates a Snowplow RemoveFromCart entity.
 */
export function createRemoveFromCart(removeFromCart: RemoveFromCart){
    return {
        schema: 'iglu:com.leosnumismatics/remove_from_cart/jsonschema/1-0-0',
        data: removeFromCart
    }
}

/**
 * Tracks a ProductAddedToCart event specification.
 * ID: 1b8b1956-a2e0-428e-96b5-2d8e0818ba6d
 */
export function trackProductAddedToCartSpec(productAddedToCart: AddToCart & ContextsOrTimestamp, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '1b8b1956-a2e0-428e-96b5-2d8e0818ba6d',
        name: 'Product Added to Cart',
        data_product_id: 'eb003f2a-9b7b-46cf-ad7b-b8f2ee52bef9',
        data_product_name: 'Leo&#x27;s Numismatics Data Product',
        data_product_domain: 'Sales'
    });

    const context = Array.isArray(productAddedToCart.context)
        ? [...productAddedToCart.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedProductAddedToCart = {
        ...productAddedToCart,
        context,
    };

    trackAddToCart<Record<string, unknown> | EventSpecification>(modifiedProductAddedToCart, trackers);
}
/**
 * Tracks a CheckoutCompleted event specification.
 * ID: 2573385c-7d81-47d3-b827-15270f05bae8
 */
export function trackCheckoutCompletedSpec(checkoutCompleted: CheckoutCompleted & ContextsOrTimestamp<EcommerceProduct>, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '2573385c-7d81-47d3-b827-15270f05bae8',
        name: 'Checkout Completed',
        data_product_id: 'eb003f2a-9b7b-46cf-ad7b-b8f2ee52bef9',
        data_product_name: 'Leo&#x27;s Numismatics Data Product',
        data_product_domain: 'Sales'
    });

    const context = Array.isArray(checkoutCompleted.context)
        ? [...checkoutCompleted.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedCheckoutCompleted = {
        ...checkoutCompleted,
        context,
    };

    trackCheckoutCompleted<EcommerceProduct | EventSpecification>(modifiedCheckoutCompleted, trackers);
}
/**
 * @deprecated Outdated data structure detected.
 * Tracks a CheckoutStarted event specification.
 * ID: 8640a99c-5984-41b3-a5cb-91f8bb5efe90
 */
export function trackCheckoutStartedSpec(checkoutStarted: CheckoutStarted & ContextsOrTimestamp<EcommerceProduct1>, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '8640a99c-5984-41b3-a5cb-91f8bb5efe90',
        name: 'Checkout Started',
        data_product_id: 'eb003f2a-9b7b-46cf-ad7b-b8f2ee52bef9',
        data_product_name: 'Leo&#x27;s Numismatics Data Product',
        data_product_domain: 'Sales'
    });

    const context = Array.isArray(checkoutStarted.context)
        ? [...checkoutStarted.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedCheckoutStarted = {
        ...checkoutStarted,
        context,
    };

    trackCheckoutStarted<EcommerceProduct1 | EventSpecification>(modifiedCheckoutStarted, trackers);
}
/**
 * Tracks a ProductRemovedFromCart event specification.
 * ID: 9d297939-9166-418f-9bd1-b94de8b13e84
 */
export function trackProductRemovedFromCartSpec(productRemovedFromCart: RemoveFromCart & ContextsOrTimestamp, trackers?: string[]){
    const eventSpecificationContext: SelfDescribingJson<EventSpecification> = createEventSpecification({ 
        id: '9d297939-9166-418f-9bd1-b94de8b13e84',
        name: 'Product Removed from Cart',
        data_product_id: 'eb003f2a-9b7b-46cf-ad7b-b8f2ee52bef9',
        data_product_name: 'Leo&#x27;s Numismatics Data Product',
        data_product_domain: 'Sales'
    });

    const context = Array.isArray(productRemovedFromCart.context)
        ? [...productRemovedFromCart.context, eventSpecificationContext]
        : [eventSpecificationContext];

    const modifiedProductRemovedFromCart = {
        ...productRemovedFromCart,
        context,
    };

    trackRemoveFromCart<Record<string, unknown> | EventSpecification>(modifiedProductRemovedFromCart, trackers);
}


